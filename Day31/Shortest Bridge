You are given an n x n binary matrix grid where 1 represents land and 0 represents water.
An island is a 4-directionally connected group of 1's not connected to any other 1's. There are exactly two islands in grid.
You may change 0's to 1's to connect the two islands to form one island.
Return the smallest number of 0's you must flip to connect the two islands.

Example 1:
Input: grid = [[0,1],[1,0]]
Output: 1
Example 2:

Input: grid = [[0,1,0],[0,0,0],[0,0,1]]
Output: 2
Example 3:

Input: grid = [[1,1,1,1,1],[1,0,0,0,1],[1,0,1,0,1],[1,0,0,0,1],[1,1,1,1,1]]
Output: 1
 
Constraints:
n == grid.length == grid[i].length
2 <= n <= 100
grid[i][j] is either 0 or 1.
There are exactly two islands in grid.
------------------------------------------------------------------------------------------------------------------
C++ Solution

class Solution {
public:
    int shortestBridge(std::vector<std::vector<int>>& grid) {
        int n = grid.size();
        std::vector<std::pair<int, int>> directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        std::queue<std::pair<int, int>> bfs_queue;
        bool found = false;

        for (int i = 0; i < n; ++i) {
            if (found) break;
            for (int j = 0; j < n; ++j) {
                if (grid[i][j] == 1) {
                    dfs(grid, i, j, bfs_queue);
                    found = true;
                    break;
                }
            }
        }

        int steps = 0;
        while (!bfs_queue.empty()) {
            int size = bfs_queue.size();
            for (int i = 0; i < size; ++i) {
                auto [x, y] = bfs_queue.front();
                bfs_queue.pop();
                
                for (auto [dx, dy] : directions) {
                    int nx = x + dx;
                    int ny = y + dy;
                    
                    if (nx >= 0 && nx < n && ny >= 0 && ny < n) {
                        if (grid[nx][ny] == 1) {
                            return steps;
                        } else if (grid[nx][ny] == 0) {
                            grid[nx][ny] = -1; // mark as visited
                            bfs_queue.push({nx, ny});
                        }
                    }
                }
            }
            ++steps;
        }
        
        return -1; 
    }

private:
    void dfs(std::vector<std::vector<int>>& grid, int x, int y, std::queue<std::pair<int, int>>& bfs_queue) {
        int n = grid.size();
        std::vector<std::pair<int, int>> directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        grid[x][y] = -1; 
        bfs_queue.push({x, y});
        
        for (auto [dx, dy] : directions) {
            int nx = x + dx;
            int ny = y + dy;
            if (nx >= 0 && nx < n && ny >= 0 && ny < n && grid[nx][ny] == 1) {
                dfs(grid, nx, ny, bfs_queue);
            }
        }
    }
};
