Given an integer array nums, return the number of reverse pairs in the array.
A reverse pair is a pair (i, j) where:

0 <= i < j < nums.length and
nums[i] > 2 * nums[j].
 
Example 1:
Input: nums = [1,3,2,3,1]
Output: 2
Explanation: The reverse pairs are:
(1, 4) --> nums[1] = 3, nums[4] = 1, 3 > 2 * 1
(3, 4) --> nums[3] = 3, nums[4] = 1, 3 > 2 * 1
Example 2:

Input: nums = [2,4,3,5,1]
Output: 3
Explanation: The reverse pairs are:
(1, 4) --> nums[1] = 4, nums[4] = 1, 4 > 2 * 1
(2, 4) --> nums[2] = 3, nums[4] = 1, 3 > 2 * 1
(3, 4) --> nums[3] = 5, nums[4] = 1, 5 > 2 * 1
 
Constraints:
1 <= nums.length <= 5 * 104
-231 <= nums[i] <= 231 - 1
----------------------------------------------------------------
C++ Solution

class Solution {
public:
    int reversePairs(vector<int>& nums) {
        return mergeSort(nums, 0, nums.size() - 1);
    }
    
private:
    int mergeSort(vector<int>& nums, int left, int right) {
        if (left >= right) return 0;
        
        int mid = left + (right - left) / 2;
        int count = mergeSort(nums, left, mid) + mergeSort(nums, mid + 1, right);

        int j = mid + 1;
        for (int i = left; i <= mid; ++i) {
            while (j <= right && nums[i] > 2 * (long long)nums[j]) {
                ++j;
            }
            count += (j - (mid + 1));
        }

        vector<int> temp(right - left + 1);
        int leftIdx = left, rightIdx = mid + 1, k = 0;
        while (leftIdx <= mid && rightIdx <= right) {
            if (nums[leftIdx] <= nums[rightIdx]) {
                temp[k++] = nums[leftIdx++];
            } else {
                temp[k++] = nums[rightIdx++];
            }
        }
        while (leftIdx <= mid) {
            temp[k++] = nums[leftIdx++];
        }
        while (rightIdx <= right) {
            temp[k++] = nums[rightIdx++];
        }
        for (int i = 0; i < temp.size(); ++i) {
            nums[left + i] = temp[i];
        }
        
        return count;
    }
};
