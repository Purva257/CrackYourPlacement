Given an integer array nums, handle multiple queries of the following types:

Update the value of an element in nums.
Calculate the sum of the elements of nums between indices left and right inclusive where left <= right.
Implement the NumArray class:

NumArray(int[] nums) Initializes the object with the integer array nums.
void update(int index, int val) Updates the value of nums[index] to be val.
int sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).
 

Example 1:

Input
["NumArray", "sumRange", "update", "sumRange"]
[[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]
Output
[null, 9, null, 8]

Explanation
NumArray numArray = new NumArray([1, 3, 5]);
numArray.sumRange(0, 2); // return 1 + 3 + 5 = 9
numArray.update(1, 2);   // nums = [1, 2, 5]
numArray.sumRange(0, 2); // return 1 + 2 + 5 = 8
 
Constraints:
1 <= nums.length <= 3 * 104
-100 <= nums[i] <= 100
0 <= index < nums.length
-100 <= val <= 100
0 <= left <= right < nums.length
At most 3 * 104 calls will be made to update and sumRange.
---------------------------------------------------------------------------------------------------
C++ Solution

class NumArray {
private:
    vector<int> segTree;
    int n;

    void buildSegmentTree(vector<int>& nums, int left, int right, int pos) {
        if (left == right) {
            segTree[pos] = nums[left];
            return;
        }
        int mid = (left + right) / 2;
        buildSegmentTree(nums, left, mid, 2 * pos + 1);
        buildSegmentTree(nums, mid + 1, right, 2 * pos + 2);
        segTree[pos] = segTree[2 * pos + 1] + segTree[2 * pos + 2];
    }

    void updateSegmentTree(int index, int val, int left, int right, int pos) {
        if (left == right) {
            segTree[pos] = val;
            return;
        }
        int mid = (left + right) / 2;
        if (index <= mid) {
            updateSegmentTree(index, val, left, mid, 2 * pos + 1);
        } else {
            updateSegmentTree(index, val, mid + 1, right, 2 * pos + 2);
        }
        segTree[pos] = segTree[2 * pos + 1] + segTree[2 * pos + 2];
    }

    int sumRangeSegmentTree(int ql, int qr, int left, int right, int pos) {
        if (ql <= left && qr >= right) {
            return segTree[pos];
        }
        if (ql > right || qr < left) {
            return 0;
        }
        int mid = (left + right) / 2;
        return sumRangeSegmentTree(ql, qr, left, mid, 2 * pos + 1) +
               sumRangeSegmentTree(ql, qr, mid + 1, right, 2 * pos + 2);
    }

public:
    NumArray(vector<int>& nums) {
        n = nums.size();
        segTree.resize(4 * n);
        buildSegmentTree(nums, 0, n - 1, 0);
    }

    void update(int index, int val) {
        updateSegmentTree(index, val, 0, n - 1, 0);
    }

    int sumRange(int left, int right) {
        return sumRangeSegmentTree(left, right, 0, n - 1, 0);
    }
};

/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray* obj = new NumArray(nums);
 * obj->update(index,val);
 * int param_2 = obj->sumRange(left,right);
 */
