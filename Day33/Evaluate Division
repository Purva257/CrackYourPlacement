You are given an array of variable pairs equations and an array of real numbers values, where equations[i] = [Ai, Bi] and values[i] represent the equation Ai / Bi = values[i]. Each Ai or Bi is a string that represents a single variable.
You are also given some queries, where queries[j] = [Cj, Dj] represents the jth query where you must find the answer for Cj / Dj = ?.
Return the answers to all queries. If a single answer cannot be determined, return -1.0.
Note: The input is always valid. You may assume that evaluating the queries will not result in division by zero and that there is no contradiction.
Note: The variables that do not occur in the list of equations are undefined, so the answer cannot be determined for them.

 
Example 1:
Input: equations = [["a","b"],["b","c"]], values = [2.0,3.0], queries = [["a","c"],["b","a"],["a","e"],["a","a"],["x","x"]]
Output: [6.00000,0.50000,-1.00000,1.00000,-1.00000]
Explanation: 
Given: a / b = 2.0, b / c = 3.0
queries are: a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ? 
return: [6.0, 0.5, -1.0, 1.0, -1.0 ]
note: x is undefined => -1.0
Example 2:

Input: equations = [["a","b"],["b","c"],["bc","cd"]], values = [1.5,2.5,5.0], queries = [["a","c"],["c","b"],["bc","cd"],["cd","bc"]]
Output: [3.75000,0.40000,5.00000,0.20000]
Example 3:

Input: equations = [["a","b"]], values = [0.5], queries = [["a","b"],["b","a"],["a","c"],["x","y"]]
Output: [0.50000,2.00000,-1.00000,-1.00000]
 

Constraints:
1 <= equations.length <= 20
equations[i].length == 2
1 <= Ai.length, Bi.length <= 5
values.length == equations.length
0.0 < values[i] <= 20.0
1 <= queries.length <= 20
queries[i].length == 2
1 <= Cj.length, Dj.length <= 5
Ai, Bi, Cj, Dj consist of lower case English letters and digits.
----------------------------------------------------------------------------------------------------------------------------------
C++ Solution

class Solution {
public:

    double dfs(const std::string& start, const std::string& end, std::unordered_map<std::string, std::unordered_map<std::string, double>>& graph, std::unordered_set<std::string>& visited) {
        if (graph[start].find(end) != graph[start].end()) {
            return graph[start][end];
        }
        
        visited.insert(start);
        
        for (const auto& neighbor : graph[start]) {
            if (visited.find(neighbor.first) == visited.end()) {
                double productWeight = dfs(neighbor.first, end, graph, visited);
                if (productWeight != -1.0) {
                    return neighbor.second * productWeight;
                }
            }
        }
        
        return -1.0;
    }
    
    std::vector<double> calcEquation(std::vector<std::vector<std::string>>& equations, std::vector<double>& values, std::vector<std::vector<std::string>>& queries) {
        std::unordered_map<std::string, std::unordered_map<std::string, double>> graph;

        for (int i = 0; i < equations.size(); ++i) {
            std::string u = equations[i][0];
            std::string v = equations[i][1];
            double weight = values[i];
            
            graph[u][v] = weight;
            graph[v][u] = 1.0 / weight;
        }

        std::vector<double> results;
        for (const auto& query : queries) {
            std::string start = query[0];
            std::string end = query[1];
            
            if (graph.find(start) == graph.end() || graph.find(end) == graph.end()) {
                results.push_back(-1.0);
            } else if (start == end) {
                results.push_back(1.0);
            } else {
                std::unordered_set<std::string> visited;
                double result = dfs(start, end, graph, visited);
                results.push_back(result);
            }
        }
        
        return results;
    }
};
