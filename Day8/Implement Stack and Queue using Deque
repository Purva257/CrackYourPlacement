Deque also known as double ended queue, as name suggests is a special kind of queue in which insertions and deletions can be done at the last as well as at the beginning.
A link-list representation of deque is such that each node points to the next node as well as the previous node. So that insertion and deletions take constant time at both the beginning and the last.
Now, deque can be used to implement a stack and queue. One simply needs to understand how deque can made to work as a stack or a queue
Examples: Stack 
Input : Stack : 1 2 3
        Push(4)
Output : Stack : 1 2 3 4

Input : Stack : 1 2 3
        Pop()
Output : Stack : 1 2

Examples: Queue 

Input: Queue : 1 2 3
       Enqueue(4)
Output: Queue : 1 2 3 4

Input: Queue : 1 2 3
       Dequeue()
Output: Queue : 2 3
----------------------------------------------------------------------------------------------------------------------
C++ Solution

#include <bits/stdc++.h>
using namespace std;

struct DQueNode {
    int value;
    DQueNode* next;
    DQueNode* prev;
};
class Deque {
private:
    DQueNode* head;
    DQueNode* tail;

public:
    Deque()
    {
        head = tail = NULL;
    }
    bool isEmpty()
    {
        if (head == NULL)
            return true;
        return false;
    }
    int size()
    {
        if (!isEmpty()) {
            DQueNode* temp = head;
            int len = 0;
            while (temp != NULL) {
                len++;
                temp = temp->next;
            }
            return len;
        }
        return 0;
    }
    void insert_first(int element)
    {
        DQueNode* temp = new DQueNode[sizeof(DQueNode)];
        temp->value = element;
        if (head == NULL) {
            head = tail = temp;
            temp->next = temp->prev = NULL;
        }
        else {
            head->prev = temp;
            temp->next = head;
            temp->prev = NULL;
            head = temp;
        }
    }
    void insert_last(int element)
    {
        DQueNode* temp = new DQueNode[sizeof(DQueNode)];
        temp->value = element;
        if (head == NULL) {
            head = tail = temp;
            temp->next = temp->prev = NULL;
        }
        else {
            tail->next = temp;
            temp->next = NULL;
            temp->prev = tail;
            tail = temp;
        }
    }
    void remove_first()
    {
        // if list is not empty
        if (!isEmpty()) {
            DQueNode* temp = head;
            head = head->next;
            if(head) head->prev = NULL;
            delete temp;
            if(head == NULL) tail = NULL;
            return;
        }
        cout << "List is Empty" << endl;
    }
    void remove_last()
    {
        if (!isEmpty()) {
            DQueNode* temp = tail;
            tail = tail->prev;
            if(tail) tail->next = NULL;
            delete temp;
            if(tail == NULL) head = NULL;
            return;
        }
        cout << "List is Empty" << endl;
    }
    void display()
    {
        // if list is not empty
        if (!isEmpty()) {
            DQueNode* temp = head;
            while (temp != NULL) {
                cout << temp->value << " ";
                temp = temp->next;
            }
            cout << endl;
            return;
        }
        cout << "List is Empty" << endl;
    }
};
class Stack : public Deque {
public:
    void push(int element)
    {
        insert_last(element);
    }
    void pop()
    {
        remove_last();
    }
};
class Queue : public Deque {
public:
    void enqueue(int element)
    {
        insert_last(element);
    }
    void dequeue()
    {
        remove_first();
    }
};
