Given a string s, rearrange the characters of s so that any two adjacent characters are not the same.
Return any possible rearrangement of s or return "" if not possible.

 
Example 1:
Input: s = "aab"
Output: "aba"
Example 2:

Input: s = "aaab"
Output: ""
 
Constraints:
1 <= s.length <= 500
s consists of lowercase English letters.
----------------------------------------------------------------
C++ Solution

class Solution {
public:
    string reorganizeString(string s) {

        unordered_map<char, int> freqMap;
        for (char c : s) {
            freqMap[c]++;
        }

        priority_queue<pair<int, char>> maxHeap;
        for (auto& entry : freqMap) {
            maxHeap.push({entry.second, entry.first});
        }

        string result = "";
        pair<int, char> prev = {-1, '#'};  

        while (!maxHeap.empty()) {
            auto [freq, ch] = maxHeap.top();  
            maxHeap.pop();

            result += ch;

            if (prev.first > 0) {
                maxHeap.push(prev);
            }

            prev = {freq - 1, ch};  
        }

        if (result.length() != s.length()) {
            return "";
        }

        return result;
    }
};
