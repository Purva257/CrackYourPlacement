Given a sorted array keys[0.. n-1] of search keys and an array freq[0.. n-1] of frequency counts, where freq[i] is the number of searches to keys[i]. Construct a binary search tree of all keys such that the total cost of all the searches is as small as possible.
Let us first define the cost of a BST. The cost of a BST node is level of that node multiplied by its frequency. Level of root is 1.

Example 1:
Input:
n = 2
keys = {10, 12}
freq = {34, 50}
Output: 118
Explaination:
There can be following two possible BSTs 
        10                       12
          \                     / 
           12                 10
                              
The cost of tree I is 34*1 + 50*2 = 134
The cost of tree II is 50*1 + 34*2 = 118 

Example 2:
Input:
N = 3
keys = {10, 12, 20}
freq = {34, 8, 50}
Output: 142
Explaination: There can be many possible BSTs
     20
    /
   10  
    \
     12  
     
Among all possible BSTs, 
cost of this BST is minimum.  
Cost of this BST is 1*50 + 2*34 + 3*8 = 142

Your Task:
You don't need to read input or print anything. Your task is to complete the function optimalSearchTree() which takes the array keys[], freq[] and their size n as input parameters and returns the total cost of all the searches is as small as possible.


Expected Time Complexity: O(n3)
Expected Auxiliary Space: O(n2)

Constraints:
1 ≤ N ≤ 100
-----------------------------------------------------------------------------------------------------------------------------------------
C++ Solution

class Solution{
    public:
    int optimalSearchTree(int keys[], int freq[], int n) {
 
        vector<vector<int>> cost(n, vector<int>(n, 0));

        for (int i = 0; i < n; i++) {
            cost[i][i] = freq[i];
        }
        

        for (int length = 2; length <= n; length++) {
            for (int i = 0; i <= n - length; i++) {
                int j = i + length - 1;
                cost[i][j] = INT_MAX; 

                int sum_freq = 0;
                for (int k = i; k <= j; k++) {
                    sum_freq += freq[k];
                }

                for (int r = i; r <= j; r++) {
                    int c = (r > i ? cost[i][r - 1] : 0) + 
                            (r < j ? cost[r + 1][j] : 0) + 
                            sum_freq;
                    if (c < cost[i][j]) {
                        cost[i][j] = c;
                    }
                }
            }
        }
        
        return cost[0][n-1];
    }
