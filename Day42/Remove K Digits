Given string num representing a non-negative integer num, and an integer k, return the smallest possible integer after removing k digits from num.

Example 1:
Input: num = "1432219", k = 3
Output: "1219"
Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.
Example 2:

Input: num = "10200", k = 1
Output: "200"
Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.
Example 3:

Input: num = "10", k = 2
Output: "0"
Explanation: Remove all the digits from the number and it is left with nothing which is 0.
 
Constraints:
1 <= k <= num.length <= 105
num consists of only digits.
num does not have any leading zeros except for the zero itself.
--------------------------------------------------------------------------------------
C++ Solution

class Solution {
public:
    std::string removeKdigits(std::string num, int k) {
        std::deque<char> dq;
        
        for (char c : num) {

            while (!dq.empty() && k > 0 && dq.back() > c) {
                dq.pop_back();
                k--;
            }
            dq.push_back(c);
        }

        while (k > 0 && !dq.empty()) {
            dq.pop_back();
            k--;
        }

        std::string result(dq.begin(), dq.end());
 
        size_t start = result.find_first_not_of('0');
        if (start == std::string::npos) {
            return "0"; 
        }
        return result.substr(start);
    }
};
