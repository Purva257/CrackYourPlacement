Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string "".
The testcases will be generated such that the answer is unique.

Example 1:
Input: s = "ADOBECODEBANC", t = "ABC"
Output: "BANC"
Explanation: The minimum window substring "BANC" includes 'A', 'B', and 'C' from string t.
Example 2:

Input: s = "a", t = "a"
Output: "a"
Explanation: The entire string s is the minimum window.
Example 3:

Input: s = "a", t = "aa"
Output: ""
Explanation: Both 'a's from t must be included in the window.
Since the largest window of s only has one 'a', return empty string.
 
Constraints:
m == s.length
n == t.length
1 <= m, n <= 105
s and t consist of uppercase and lowercase English letters.
--------------------------------------------------------------------------------------------------------------
C++ Solution

class Solution {
public:
    string minWindow(string s, string t) {
        unordered_map<char, int> t_count, window_count;
        for (char c : t) t_count[c]++;
        
        int required = t_count.size(), formed = 0;
        int left = 0, right = 0, start = 0, min_len = s.size() + 1;
        
        while (right < s.size()) {
            char c = s[right];
            window_count[c]++;
            if (t_count.count(c) && window_count[c] == t_count[c]) formed++;
            
            while (left <= right && formed == required) {
                c = s[left];
                if (right - left + 1 < min_len) {
                    start = left;
                    min_len = right - left + 1;
                }
                window_count[c]--;
                if (t_count.count(c) && window_count[c] < t_count[c]) formed--;
                left++;
            }
            right++;
        }
        
        return min_len == s.size() + 1 ? "" : s.substr(start, min_len);
    }
};
