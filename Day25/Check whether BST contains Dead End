Given a Binary Search Tree that contains unique positive integer values greater than 0. The task is to complete the function isDeadEnd which returns true if the BST contains a dead end else returns false. Here Dead End means a leaf node, at which no other node can be inserted.

Example 1:
Input :   
               8
             /   \ 
           5      9
         /  \     
        2    7 
       /
      1     
          
Output : 
Yes
Explanation : 
Node 1 is a Dead End in the given BST.
Example 2:

Input :     
              8
            /   \ 
           7     10
         /      /   \
        2      9     13

Output : 
Yes
Explanation : 
Node 9 is a Dead End in the given BST.
Your Task: You don't have to input or print anything. Complete the function isDeadEnd() which takes BST as input and returns a boolean value.

Expected Time Complexity: O(N), where N is the number of nodes in the BST.
Expected Space Complexity: O(N)

Constraints:
1 <= N <= 1001
1 <= Value of Nodes <= 10001
-----------------------------------------------------------------------------------------------------------
C++ Solution

/*The Node structure is
struct Node {
int data;
Node * right, * left;
};*/

/*You are required to complete below method */
class Solution{
public:
    bool isDeadEnd(Node* root) {
        // Call helper function with the full range of valid values
        return isDeadEndHelper(root, 1, INT_MAX);
    }
    
private:
    bool isDeadEndHelper(Node* node, int min, int max) {
        if (node == nullptr) {
            return false;
        }

        if (node->left == nullptr && node->right == nullptr) {

            if (node->data == min && node->data == max) {
                return true;
            }
            return false;
        }

        bool leftCheck = isDeadEndHelper(node->left, min, node->data - 1);

        bool rightCheck = isDeadEndHelper(node->right, node->data + 1, max);

        return leftCheck || rightCheck;
    }
};
