Given the head of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well.

Example 1:
Input: head = [1,2,3,3,4,4,5]
Output: [1,2,5]
Example 2:

Input: head = [1,1,1,2,3]
Output: [2,3]
 

Constraints:
The number of nodes in the list is in the range [0, 300].
-100 <= Node.val <= 100
The list is guaranteed to be sorted in ascending order.
-----------------------------------------------------------------------------------
C++ Solution

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        ListNode dummy(0);
        dummy.next = head;
        ListNode* current = &dummy; 
        
        while (current->next && current->next->next) {
            if (current->next->val == current->next->next->val) {
      
                int duplicateValue = current->next->val;
                while (current->next && current->next->val == duplicateValue) {
                    ListNode* temp = current->next;
                    current->next = temp->next;
                    delete temp; 
                }
            } else {
                current = current->next;
            }
        }
        
        return dummy.next;
    }
};
