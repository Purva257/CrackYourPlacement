Given a linked list, rearrange it such that the converted list should be of the form a < b > c < d > e < f … where a, b, c… are consecutive data nodes of the linked list.

Examples: 
Input:  1->2->3->4
Output: 1->3->2->4 
Explanation : 1 and 3 should come first before 2 and 4 in zig-zag fashion, So resultant linked-list will be 1->3->2->4. 

Input:  11->15->20->5->10
Output: 11->20->5->15->10 
A simple approach to do this is to sort the linked list using merge sort and then swap alternate, but that requires O(n Log n) time complexity. Here n is a number of elements in the linked list.

An efficient approach that requires O(n) time is, using a single scan similar to bubble sort and then maintain a flag for representing which order () currently we are. If the current two elements are not in that order then swap those elements otherwise not. Please refer to this for a detailed explanation of the swapping order. 
-----------------------------------------------------------------------------------------------------------------------------------------------------
C++ Solution

struct Node { 
    int data; 
    struct Node* next; 
}; 

void zigZagList(Node* head) 
{  
    bool flag = true; 

    Node* current = head; 
    while (current->next != NULL) { 
        if (flag) 
        { 
            if (current->data > current->next->data) 
                swap(current->data, current->next->data); 
        } 
        else 
        { 
            if (current->data < current->next->data) 
                swap(current->data, current->next->data); 
        } 
  
        current = current->next; 
        flag = !flag; 
    } 
} 

void push(Node** head_ref, int new_data) 
{ 

    struct Node* new_Node = new Node; 
    new_Node->data = new_data; 
    new_Node->next = (*head_ref); 
    (*head_ref) = new_Node; 
} 

void printList(struct Node* Node) 
{ 
    while (Node != NULL) { 
        printf("%d->", Node->data); 
        Node = Node->next; 
    } 
    printf("NULL"); 
} 
