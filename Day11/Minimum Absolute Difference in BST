Given the root of a Binary Search Tree (BST), return the minimum absolute difference between the values of any two different nodes in the tree.

Example 1:
Input: root = [4,2,6,1,3]
Output: 1
Example 2:

Input: root = [1,0,48,null,null,12,49]
Output: 1
 

Constraints:
The number of nodes in the tree is in the range [2, 104].
0 <= Node.val <= 105
-------------------------------------------------------------------------------------------------
C++ Solution

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    // Helper function for in-order traversal
    void inOrderTraversal(TreeNode* root, std::vector<int>& values) {
        if (root == nullptr) return;
        inOrderTraversal(root->left, values);
        values.push_back(root->val);
        inOrderTraversal(root->right, values);
    }
    
    int getMinimumDifference(TreeNode* root) {
        std::vector<int> values;
        inOrderTraversal(root, values);
        
        int minDiff = INT_MAX;
        for (size_t i = 1; i < values.size(); ++i) {
            minDiff = std::min(minDiff, values[i] - values[i - 1]);
        }
        
        return minDiff;
    }
};
