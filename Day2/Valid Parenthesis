Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.
An input string is valid if:
Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 

Example 1:
Input: s = "()"
Output: true
Example 2:

Input: s = "()[]{}"
Output: true
Example 3:

Input: s = "(]"
Output: false
 

Constraints:
1 <= s.length <= 104
s consists of parentheses only '()[]{}'.
----------------------------------------------------------------------------------------------------------------------------
C++ Solution

class Solution {
public:
    bool isValid(string s) {
        stack<char> stk;
        
        unordered_map<char, char> brackets = {
            {')', '('},
            {'}', '{'},
            {']', '['}
        };

        for (char c : s) {
            if (brackets.count(c)) {
                char topElement = stk.empty() ? '#' : stk.top();
                stk.pop();
                if (topElement != brackets[c]) {
                    return false;
                }
            } else {
                stk.push(c);
            }
        }
        return stk.empty();
    }
};
