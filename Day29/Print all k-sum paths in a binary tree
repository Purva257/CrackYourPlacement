A binary tree and a number k are given. Print every path in the tree with sum of the nodes in the path as k. 
A path can start from any node and end at any node and must be downward only, i.e. they need not be root node and leaf node; and negative numbers can also be there in the tree.

Examples: 

Input : k = 5  
Root of below binary tree:
           1
        /     \
      3        -1
    /   \     /   \
  2     1   4       5                        
      /   /    \         \                    
   1   1          2          6    
                       
Output :
3 2 
3 1 1 
1 3 1 
4 1 
1 -1 4 1 
-1 4 2 
5 
1 -1 5 

----------------------------------------------------------------------------------------------------
C++ Solution

void printVector(const vector<int>& v, int i)
{
    for (int j = i; j < v.size(); j++)
        cout << v[j] << " ";
    cout << endl;
}

struct Node {
    int data;
    Node *left, *right;
    Node(int x)
    {
        data = x;
        left = right = NULL;
    }
};

void printKPathUtil(Node* root, vector<int>& path, int k)
{

    if (!root)
        return;

    path.push_back(root->data);

    printKPathUtil(root->left, path, k);
 
    // check if there's any k sum path
    // in the right sub-tree.
    printKPathUtil(root->right, path, k);

    int f = 0;
    for (int j = path.size() - 1; j >= 0; j--) {
        f += path[j];

        if (f == k)
            printVector(path, j);
    }

    path.pop_back();
}

void printKPath(Node* root, int k)
{
    vector<int> path;
    printKPathUtil(root, path, k);
}
