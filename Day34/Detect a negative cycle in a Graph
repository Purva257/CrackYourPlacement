Given a directed weighted graph, the task is to find whether the given graph contains any negative-weight cycle or not.
Note: A negative-weight cycle is a cycle in a graph whose edges sum to a negative value.

Example:
Input:
Example1
Example 1
Output: No
Input:

Example2
Example 2
Output: Yes

Algorithm to Find Negative Cycle in a Directed Weighted Graph Using Bellman-Ford:
Initialize distance array dist[] for each vertex ‘v‘ as dist[v] = INFINITY.
Assume any vertex (let’s say ‘0’) as source and assign dist = 0.
Relax all the edges(u,v,weight) N-1 times as per the below condition:
dist[v] = minimum(dist[v], distance[u] + weight)
Now, Relax all the edges one more time i.e. the Nth time and based on the below two cases we can detect the negative cycle:
Case 1 (Negative cycle exists): For any edge(u, v, weight), if dist[u] + weight < dist[v]
Case 2 (No Negative cycle) : case 1 fails for all the edges.
---------------------------------------------------------------------------------------------------------------------
C++ Solution

#include <bits/stdc++.h>
using namespace std;

struct Edge {
    int src, dest, weight;
};

struct Graph {

    int V, E;

    struct Edge* edge;
};

struct Graph* createGraph(int V, int E)
{
    struct Graph* graph = new Graph;
    graph->V = V;
    graph->E = E;
    graph->edge = new Edge[graph->E];
    return graph;
}

bool isNegCycleBellmanFord(struct Graph* graph, int src,
                           int dist[])
{
    int V = graph->V;
    int E = graph->E;

    for (int i = 0; i < V; i++)
        dist[i] = INT_MAX;
    dist[src] = 0;

    for (int i = 1; i <= V - 1; i++) {
        for (int j = 0; j < E; j++) {
            int u = graph->edge[j].src;
            int v = graph->edge[j].dest;
            int weight = graph->edge[j].weight;
            if (dist[u] != INT_MAX
                && dist[u] + weight < dist[v])
                dist[v] = dist[u] + weight;
        }
    }

    for (int i = 0; i < E; i++) {
        int u = graph->edge[i].src;
        int v = graph->edge[i].dest;
        int weight = graph->edge[i].weight;
        if (dist[u] != INT_MAX
            && dist[u] + weight < dist[v])
            return true;
    }
 
    return false;
}

bool isNegCycleDisconnected(struct Graph* graph)
{
 
    int V = graph->V;

    bool visited[V];
    memset(visited, 0, sizeof(visited));

    int dist[V];

    for (int i = 0; i < V; i++) {
        if (visited[i] == false) {
            if (isNegCycleBellmanFord(graph, i, dist))
                return true;

            for (int i = 0; i < V; i++)
                if (dist[i] != INT_MAX)
                    visited[i] = true;
        }
    }
 
    return false;
}
 
