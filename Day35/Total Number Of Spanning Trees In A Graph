Given a connected undirected graph of N vertices and M edges. The task is the find the total number of spanning trees possible in the graph.
Note: A spanning tree is a subset of Graph G, which has all the vertices covered with the minimum possible number of edges. Hence, a spanning tree does not have cycles and it cannot be disconnected. By this definition, we can draw a conclusion that every connected and undirected Graph G has at least one spanning tree.

Example 1:
Input:
N = 6, M = 5
graph = {{0, 3}
         {0, 1}
         {1, 2}.
         {1, 5},
         {3, 4}} Output: 1 Explanation: Only one spanning tree is possible,i.e. the graph itself. {{0, 1},  {0, 3},  {1, 2},  {1, 5},  {3, 4}} 
 

Your Task:  
You don't need to read input or print anything. Your task is to complete the function countSpanningTrees() which takes two integers N and M and a 2D matrix denoting the connected edges and returns an integers as output.
 

Expected Time Complexity: O(N4)
Expected Auxiliary Space: O(N2)

Constraints:
1 <= N <= 10
N - 1 <= M <= N *(N - 1) / 2
0 <= graph[i][0], graph[i][1] <= N - 1
--------------------------------------------------------------------------------------------------------------------------------------------
C++ Solution

class Solution{
    public:
    int countSpanningTrees(vector<vector<int>>& graph, int n, int m) {
        vector<vector<int>> L(n, vector<int>(n, 0));

        for(int i = 0; i < m; i++) {
            int u = graph[i][0];
            int v = graph[i][1];
            L[u][u]++;
            L[v][v]++;
            L[u][v]--;
            L[v][u]--;
        }

        vector<vector<int>> minorL(n-1, vector<int>(n-1, 0));
        for(int i = 1; i < n; i++) {
            for(int j = 1; j < n; j++) {
                minorL[i-1][j-1] = L[i][j];
            }
        }

        return determinant(minorL, n-1);
    }
    
private:
    int determinant(vector<vector<int>>& matrix, int size) {
        if (size == 1) return matrix[0][0];
        if (size == 2) return matrix[0][0]*matrix[1][1] - matrix[0][1]*matrix[1][0];
        
        int det = 0;
        vector<vector<int>> submatrix(size-1, vector<int>(size-1, 0));
        for (int x = 0; x < size; x++) {
            int subi = 0;
            for (int i = 1; i < size; i++) {
                int subj = 0;
                for (int j = 0; j < size; j++) {
                    if (j == x) continue;
                    submatrix[subi][subj] = matrix[i][j];
                    subj++;
                }
                subi++;
            }
            det += (x%2 == 0 ? 1 : -1) * matrix[0][x] * determinant(submatrix, size-1);
        }
        return det;
    }
};
