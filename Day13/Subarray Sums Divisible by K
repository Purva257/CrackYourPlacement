Given an integer array nums and an integer k, return the number of non-empty subarrays that have a sum divisible by k.
A subarray is a contiguous part of an array.

Example 1:
Input: nums = [4,5,0,-2,-3,1], k = 5
Output: 7
Explanation: There are 7 subarrays with a sum divisible by k = 5:
[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]
Example 2:

Input: nums = [5], k = 9
Output: 0
 
Constraints:
1 <= nums.length <= 3 * 104
-104 <= nums[i] <= 104
2 <= k <= 104
----------------------------------------------------------------------------------------------------------
C++ Solution

class Solution {
public:
    int subarraysDivByK(vector<int>& nums, int k) {
        std::unordered_map<int, int> remainder_count;
        int prefix_sum = 0;
        int count = 0;
        
        // Initialize the hash map with remainder 0 having count 1
        remainder_count[0] = 1;
        
        for (int num : nums) {
            prefix_sum += num;
            int remainder = ((prefix_sum % k) + k) % k;  // Adjust for negative remainders
            
            if (remainder_count.find(remainder) != remainder_count.end()) {
                count += remainder_count[remainder];
            }
            
            remainder_count[remainder]++;
        }
        
        return count;
    }
};
